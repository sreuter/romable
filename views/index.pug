html
  head
    title!= title

    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap4.min.css")

    style.
      .toolbar { float: left; }
      th, td { font-weight: normal; padding: 0.75rem; }
      div.dataTables_info { float: left; padding-top: 0.4em !important; }

    script(src="https://code.jquery.com/jquery-1.12.4.js")
    script(src="https://cdn.datatables.net/1.10.15/js/jquery.dataTables.js")
    script(src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap4.min.js")
    script.

      var table;
      var goodCodes = {};
      var targetPath = '/tmp/roms/{system}/{alphabetical}/{file}';

      var getSystem = function(path) {
        if(path.match(/\.gbc?$/g)) {
          return "Gameboy";
        } else {
          return "Unknown";
        };
      };

      var getSortingCharacter =  function(path) {
        var char = path.charAt(0).toUpperCase();
        if(char.match(/\d/)) {
          char = "#";
        }
        return char;
      }

      var initDatatables = function() {
        return $('#table').DataTable({
          dom: 'frti',
          paging: false,
          columnDefs: [
            {
              render: function (data, type, row) {
                return getSystem(row[1]);
              },
              targets: 3
            },
            {
              render: function (data, type, row) {
                var codes = row[1].match(/\(.*?\)|\[.*?\]/g);
                if(codes) {
                  resolvedCodes = codes.map(function(code) {
                    return goodCodes[code] && goodCodes[code].title || code
                  });
                  return resolvedCodes.join(', ');
                } else {
                  return '';
                }
                //return row[0].match(/\(.*?\)|\[.*?\]/g).join(', ');
              },
              targets: 4
            },
            {
              render: function(data, type, row) {
                var exportPath = targetPath + '';
                var replacements = {
                  "{system}": getSystem(row[1]),
                  "{alphabetical}": getSortingCharacter(row[1]),
                  "{file}": row[1]
                };
                for(substr in replacements) {
                  exportPath = exportPath.replace(substr, replacements[substr]);
                }
                return exportPath;
              },
              targets: 5
            },
            {
              targets: 0,
              visible: false,
              searching: false
            }
          ]
        });
      }

      $(document).ready( function () {
        $.getJSON('GoodCodes.json')
        .done(function(json) {
          goodCodes = json;
          table = initDatatables();
          $("#targetPath").val(targetPath);
          $("#targetPath").keyup(function() {
            targetPath = $("#targetPath").val();

            // Hard refresh table
            var data = table.data();
            table.clear();
            table.rows.add(data);
            table.draw('full-hold');

          });
        })
        .fail(function(jqxhr, textStatus, error) {
          console.log(jqxhr, textStatus, error);
        });
      });

  body
    h1!= path
    div.row
      div.col-lg-6
        div.toolbar.input-group
          input#targetPath.form-control(type="text")
          span#input-group-btn
            button.btn.btn-secondary(type="button") Export
    table.table-striped.table-bordered#table(cellspacing="0", width="100%")
      thead
        tr
          th Path
          th Name
          th Size
          th System
          th Codes
          th Export Path
      tbody
        each val, index in roms
          tr
            td= index
            td= val.name
            td= val.size
            td
            td
            td