html
  head
    title!= title

    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap4.min.css")

    style.
      .toolbar { float: left; }
      th, td { font-weight: normal; padding: 0.75rem; }
      div.dataTables_info { float: left; padding-top: 0.4em !important; }
    <script>if (typeof module === 'object') {window.module = module; module = undefined;}</script>
    script(src="https://code.jquery.com/jquery-1.12.4.js")
    script(src="https://cdn.datatables.net/1.10.15/js/jquery.dataTables.js")
    script(src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap4.min.js")
    <script>if (window.module) module = window.module;</script>
    script.

      var table;
      var goodCodes = require('goodcodes');
      var targetPath = '/tmp/roms/{system}/{country}/{first-letter}/{file}';
      var directoryList = require('electron').remote.getGlobal('sharedData').directoryList;
      
      var data = [];
      for(index in directoryList) {
        data.push([index, directoryList[index].name, directoryList[index].size, '', '', ''])
      };

      var getCountryCodes = () => {
        var countryCodes = {};
        var keys = Object.keys(goodCodes);
        keys.map((value) => {
          if(goodCodes[value].type && goodCodes[value].type === 'country') {
            countryCodes[value] = goodCodes[value].title;
          }
        });
        return countryCodes;
      }

      var getCountry = (path) => {
        var countryCodes = getCountryCodes();
        for(code in countryCodes) {
          if(path.includes(code)) {
            return countryCodes[code];
          }
        }
      }

      var getSystem = function(path) {
        if(path.match(/\.gbc?$/g)) {
          return "Gameboy";
        }
      };

      var getSortingCharacter =  function(path) {
        var char = path.charAt(0).toUpperCase();
        if(char.match(/\d/)) {
          char = "#";
        }
        return char;
      }

      var initDatatables = function() {
        return $('#table').DataTable({
          data: data,
          dom: 'frti',
          paging: true,
          columnDefs: [
            {
              render: function (data, type, row) {
                return getSystem(row[1]) || "Unknown";
              },
              targets: 3
            },
            {
              render: function (data, type, row) {
                var codes = row[1].match(/\(.*?\)|\[.*?\]/g);
                if(codes) {
                  resolvedCodes = codes.map(function(code) {
                    return goodCodes[code] && goodCodes[code].title || code
                  });
                  return resolvedCodes.join(', ');
                } else {
                  return '';
                }
              },
              targets: 4
            },
            {
              render: function(data, type, row) {
                var exportPath = targetPath + '';
                var replacements = {
                  "{system}": getSystem(row[1]) || "Unknown",
                  "{country}": getCountry(row[1]) || "Misc",
                  "{first-letter}": getSortingCharacter(row[1]),
                  "{file}": row[1]
                };
                for(substr in replacements) {
                  exportPath = exportPath.replace(substr, replacements[substr]);
                }
                return exportPath;
              },
              targets: 5
            },
            {
              targets: 0,
              visible: false,
              searching: false
            }
          ]
        });
      }

      $(document).ready( function () {
        table = initDatatables();
        $('#targetPath').val(targetPath);
        $('#targetPath').keyup(function() {
          targetPath = $("#targetPath").val();
          // Hard refresh table
          var data = table.data();
          table.clear();
          table.rows.add(data);
          table.draw('full-hold');
        });
        $("#export").click(() => {
          var tableData = table.rows({filter: 'applied'}).every(function(index) {
            var row = table.cells(index, '').render('display');
            var source = row[0];
            var target = row[5];
            console.log('Copying "' + source + '" to "' + target + '"');
            require('fs-extra').copySync(source, target);
          });
        });
      });

  body
    h1!= path
    div.row
      div.col-lg-6
        div.toolbar.input-group
          input#targetPath.form-control(type="text")
          span#input-group-btn
            button#export.btn.btn-secondary(type="button") Export
    table.table-striped.table-bordered#table(cellspacing="0", width="100%")
      thead
        tr
          th Path
          th Name
          th Size
          th System
          th Codes
          th Export Path
      tbody
